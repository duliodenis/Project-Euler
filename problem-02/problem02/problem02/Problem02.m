//
//  Problem02.m
//  problem02
//
//  Created by Dulio Denis on 3/8/15.
//  Copyright (c) 2015 Dulio Denis. All rights reserved.
//

#import "Problem02.h"

@implementation Problem02

+ (float)solution {
//    Each new term in the Fibonacci sequence is generated by adding the previous two terms.
//    By starting with 1 and 2, the first 10 terms will be:
    
//    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    
//    By considering the terms in the Fibonacci sequence whose values do not exceed four million,
//    find the sum of the even-valued terms.
    
    float sum = 2;          // initialized with the sum of the first two as the base
    int limit = 4000000;
    
    // this will hold the nth-1 and nth fibonacci numbers to make the nth+1
    int fibonacci[2] = {1,2}; // initialize it with the first two Fibonacci numbers
    int nextFibonacci = 3;    // initialization not strictly needed but for completeness
    
    while (nextFibonacci < limit) {
        nextFibonacci = fibonacci[0] + fibonacci[1];
        
        if (nextFibonacci % 2 == 0) {   // if the nth+1 fibonacci is even
            sum = sum + nextFibonacci;  // then add it to the sum
        }
        fibonacci[0] = fibonacci[1];    // set-up for the next iteration
        fibonacci[1] = nextFibonacci;   // by shifting with the new value
    }
    return sum;
}

@end
